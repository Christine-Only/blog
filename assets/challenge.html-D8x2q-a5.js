import{_ as s,o as n,c as a,a as t}from"./app-C8Xn24jF.js";const e={},p=t(`<h1 id="自定义工具类型" tabindex="-1"><a class="header-anchor" href="#自定义工具类型"><span>自定义工具类型</span></a></h1><h2 id="first" tabindex="-1"><a class="header-anchor" href="#first"><span>First</span></a></h2><blockquote><p><code>First</code>表示用来返回数组的第一个元素。</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">arr1</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">type</span> <span class="token class-name">arr2</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

<span class="token keyword">type</span> <span class="token class-name">one</span> <span class="token operator">=</span> First<span class="token operator">&lt;</span>arr1<span class="token operator">&gt;</span> <span class="token comment">// &#39;a&#39;</span>
<span class="token keyword">type</span> <span class="token class-name">two</span> <span class="token operator">=</span> First<span class="token operator">&lt;</span>arr2<span class="token operator">&gt;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>索引实现
<span class="token keyword">type</span> <span class="token class-name">First<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
or
占位实现
<span class="token keyword">type</span> <span class="token class-name">First<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> Head<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">?</span> Head <span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T extends []</code>：用于判断 <code>T</code> 是否是空数组</li><li><code>T[0]</code>：用于取数组的第一项</li><li><code>infer Head</code>：表示数组第一个元素的占位</li><li><code>...rest</code>：表示数组的剩余元素</li></ul><h2 id="mutable" tabindex="-1"><a class="header-anchor" href="#mutable"><span>Mutable</span></a></h2><blockquote><p><code>Mutable&lt;T&gt;</code>表示将某个类型中的所有属性的readonly移除。</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">UserInfo</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token keyword">readonly</span> age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token comment">// {name: string, age: number}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token operator">=</span> Mutable<span class="token operator">&lt;</span>UserInfo<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Mutable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>-readonly</code>：表示把<code>readonly</code>关键字去掉</li></ul><h2 id="length" tabindex="-1"><a class="header-anchor" href="#length"><span>Length</span></a></h2><blockquote><p><code>Length&lt;T&gt;</code>表示用来获取一个数组或者类数组的长度。</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">tesla</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> length<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">spaceX</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;FALCON 9&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;FALCON HEAVY&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;DRAGON&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;STARSHIP&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;HUMAN SPACEFLIGHT&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">type</span> <span class="token class-name">length1</span> <span class="token operator">=</span> Length<span class="token operator">&lt;</span>tesla<span class="token operator">&gt;</span> <span class="token comment">// 4</span>
<span class="token keyword">type</span> <span class="token class-name">length2</span> <span class="token operator">=</span> Length<span class="token operator">&lt;</span>spaceX<span class="token operator">&gt;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Length<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span> <span class="token operator">?</span>  <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T extends { length: number; }</code>：判断<code>T</code>是否是<code>{length: number}</code>的子类型</li><li><code>T[&#39;length&#39;]</code>：在TypeScript中不能使用 <code>.</code> 语法来取值，必须使用 <code>[]</code> 语法</li></ul><h2 id="if" tabindex="-1"><a class="header-anchor" href="#if"><span>If</span></a></h2><blockquote><p><code>If&lt;T, C, F&gt;</code>表示它接收一个条件类型 <code>T</code> ，一个判断为真时的返回类型 <code>C</code> ，以及一个判断为假时的返回类型 <code>F</code>。 <code>T</code> 只能是 <code>true</code> 或者 <code>false</code>， <code>C</code> 和 <code>F</code> 可以是任意类型。</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">a</span> <span class="token operator">=</span> If<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;a&#39;</span>
<span class="token keyword">type</span> <span class="token class-name">b</span> <span class="token operator">=</span> If<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;b&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">If<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">,</span> <span class="token constant">F</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token constant">C</span> <span class="token operator">:</span> <span class="token constant">F</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T extends boolean</code>：表示 <code>T</code> 类型为 <code>boolean</code> 类型的子类型，即 <code>T</code> 只能接收 <code>true</code> 或者 <code>false</code></li><li><code>T extends true</code>：写在三元表达式中，用于判断 <code>T</code> 是否为 <code>true</code></li></ul><h2 id="concat" tabindex="-1"><a class="header-anchor" href="#concat"><span>Concat</span></a></h2><blockquote><p><code>Concat&lt;T, U&gt;</code>表示这个类型接受两个参数，返回的新数组类型应该按照输入参数从左到右的顺序合并为一个新的数组。</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// [1,2]</span>
<span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> Concat<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Concat<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T extends any[]</code>：用来限制T是一个数组，如果传递非数组会报错，U也是一样的道理。</li><li><code>[...T, ...U]</code>：可以理解成JavaScript的扩展运算符 <code>...</code> 。</li></ul><h2 id="includes" tabindex="-1"><a class="header-anchor" href="#includes"><span>Includes</span></a></h2><blockquote><p><code>Includes&lt;T， U&gt;</code>表示这个类型接受两个参数，用于判断 <code>U</code> 是否在数组 <code>T</code> 中，类似实现数组的 <code>includes</code> 方法。</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">isPillarMen</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&#39;Kars&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Esidisi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Wamuu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Santana&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;Dio&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// false</span>

<span class="token comment">// 使用简单版：预期是false，实际是true</span>
<span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token string">&#39;A&#39;</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>简单版
<span class="token keyword">type</span> <span class="token class-name">Includes<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>

完整版
<span class="token keyword">type</span> <span class="token class-name">Equal<span class="token operator">&lt;</span><span class="token constant">X</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span>
  <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">Y</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>

<span class="token keyword">type</span> <span class="token class-name">Includes<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> 
<span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First <span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span> 
  <span class="token operator">?</span> 
    Equal<span class="token operator">&lt;</span>First<span class="token punctuation">,</span><span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> 
    <span class="token operator">?</span> 
      <span class="token boolean">true</span> 
    <span class="token operator">:</span> Includes<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span><span class="token constant">U</span><span class="token operator">&gt;</span> 
  <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token comment">// false</span>
<span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token string">&#39;A&#39;</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>Equal<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span>

先分析<span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span>，假定<span class="token constant">T</span>为<span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> 为<span class="token boolean">true</span>， <span class="token function">结果</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">1</span>
<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span>

再分析<span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span>，<span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span> 为<span class="token boolean">false</span>，     <span class="token function">结果</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">2</span>
<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span>

<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">1</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">2</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="push" tabindex="-1"><a class="header-anchor" href="#push"><span>Push</span></a></h2><blockquote><p><code>Push&lt;T, U&gt;</code>表示将U类型添加到T类型，并作为T类型的最后一项。</p></blockquote><p>用例：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// [1,2,&#39;3&#39;]</span>
<span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> Push<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// [1,2,&#39;3&#39;]</span>
<span class="token keyword">type</span> <span class="token class-name">Push<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unshift" tabindex="-1"><a class="header-anchor" href="#unshift"><span>Unshift</span></a></h2><blockquote><p><code>Unshift&lt;T, U&gt;</code>表示将U类型添加到T类型，并作为T类型的第一项。</p></blockquote><p>用例：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// [&#39;3&#39;, 1, 2]</span>
<span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> Unshift<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// [&#39;3&#39;, 1, 2]</span>
<span class="token keyword">type</span> <span class="token class-name">Unshift<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="promisetype" tabindex="-1"><a class="header-anchor" href="#promisetype"><span>PromiseType</span></a></h2><blockquote><p><code>PromiseType&lt;T&gt;</code>用来获取<code>Promise</code>包裹类型。</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getInfo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 结果：(） =&gt; Promise&lt;string|number&gt;</span>
<span class="token keyword">type</span> <span class="token class-name">funcType</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> getInfo
<span class="token comment">// 结果：Promise&lt;string|number&gt;</span>
<span class="token keyword">type</span> <span class="token class-name">returnResult</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span>funcType<span class="token operator">&gt;</span>
<span class="token comment">// 结果：string|number</span>
<span class="token keyword">type</span> <span class="token class-name">PromiseResult</span> <span class="token operator">=</span> PromiseType<span class="token operator">&lt;</span>returnResult<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">PromiseType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T extends Promise&lt;infer R&gt;</code>：判断 <code>T</code> 是否是 <code>Promise&lt;infer R&gt;</code> 的子类型，也就是说T必须满足 <code>Promise&lt;any&gt;</code> 的形式。</li></ul><h2 id="按需readonly" tabindex="-1"><a class="header-anchor" href="#按需readonly"><span>按需Readonly</span></a></h2><blockquote><p><code>Readonly&lt;T, K&gt;</code> K指定应设置为Readonly的T的属性集。如果未提供K，则应使所有属性都变为只读，就像普通的 <code>Readonly&lt;T&gt;</code> 一样。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span>
  description<span class="token operator">:</span> <span class="token builtin">string</span>
  completed<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> todo<span class="token operator">:</span> MyReadonly2<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;description&#39;</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">&quot;Hey&quot;</span><span class="token punctuation">,</span>
  description<span class="token operator">:</span> <span class="token string">&quot;foobar&quot;</span><span class="token punctuation">,</span>
  completed<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

todo<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span> <span class="token comment">// Error: cannot reassign a readonly property</span>
todo<span class="token punctuation">.</span>description <span class="token operator">=</span> <span class="token string">&quot;barFoo&quot;</span> <span class="token comment">// Error: cannot reassign a readonly property</span>
todo<span class="token punctuation">.</span>completed <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// OK</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyReadonly2<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>K extends keyof T = keyof T</code>：如果不传递，则默认值为<code>keyof T</code>，意味着全部属性都添加readonly。</li></ul><h2 id="deepreadonly" tabindex="-1"><a class="header-anchor" href="#deepreadonly"><span>DeepReadonly</span></a></h2><blockquote><p><code>DeepReadonly&lt;T&gt;</code>表示将T类型的每个参数及其子对象递归地设为只读。</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token punctuation">{</span>
    a<span class="token operator">:</span> <span class="token number">1</span>
    b<span class="token operator">:</span> <span class="token string">&#39;hi&#39;</span>
  <span class="token punctuation">}</span>
  y<span class="token operator">:</span> <span class="token string">&#39;hey&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Todo</span> <span class="token operator">=</span> DeepReadonly<span class="token operator">&lt;</span><span class="token constant">X</span><span class="token operator">&gt;</span>

期望的结果👇
<span class="token keyword">type</span> <span class="token class-name">Expected</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> x<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> a<span class="token operator">:</span> <span class="token number">1</span>
    <span class="token keyword">readonly</span> b<span class="token operator">:</span> <span class="token string">&#39;hi&#39;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">readonly</span> y<span class="token operator">:</span> <span class="token string">&#39;hey&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">}</span> <span class="token operator">?</span> DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T[P] extends { [key: string]: any }</code>：这段表示T[P]是否是一个包含索引签名的字段，如果包含我们认为它是一个嵌套对象，就可以递归调用DeepReadonly。</li></ul><h2 id="tupletounion" tabindex="-1"><a class="header-anchor" href="#tupletounion"><span>TupleToUnion</span></a></h2><blockquote><p><code>TupleToUnion&lt;T&gt;</code>用来将一个元组类型T转换成联合类型.</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span>

<span class="token comment">// &quot;1&quot; | &quot;2&quot; | &quot;3&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">Test</span> <span class="token operator">=</span> TupleToUnion<span class="token operator">&lt;</span>Arr<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>方法一：
<span class="token keyword">type</span> <span class="token class-name">TupleToUnion<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span>

方法二：
<span class="token keyword">type</span> <span class="token class-name">TupleToUnion<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">L</span> <span class="token operator">|</span> TupleToUnion<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T[number]</code>：它会自动迭代元组的数字型索引，然后将所以元素组合成一个联合类型。</li><li><code>L | TupleToUnion&lt;R&gt;</code>：L表示每一次迭代中的第一个元素，它的迭代过程可以用下面伪代码表示：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 第一次迭代</span>
<span class="token keyword">const</span> <span class="token constant">L</span> <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span>
<span class="token keyword">const</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span> <span class="token operator">|</span> TupleToUnion<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span>

<span class="token comment">// 第二次迭代</span>
<span class="token keyword">const</span> <span class="token constant">L</span> <span class="token operator">=</span> <span class="token string">&#39;2&#39;</span>
<span class="token keyword">const</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;2&#39;</span> <span class="token operator">|</span> TupleToUnion<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span>

<span class="token comment">// 第三次迭代</span>
<span class="token keyword">const</span> <span class="token constant">L</span> <span class="token operator">=</span> <span class="token string">&#39;3&#39;</span>
<span class="token keyword">const</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;2&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;3&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="last" tabindex="-1"><a class="header-anchor" href="#last"><span>Last</span></a></h2><blockquote><p><code>Last&lt;T&gt;</code>用来获取数组中的最后一个元素。</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">arr1</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">type</span> <span class="token class-name">arr2</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

<span class="token keyword">type</span> <span class="token class-name">tail1</span> <span class="token operator">=</span> Last<span class="token operator">&lt;</span>arr1<span class="token operator">&gt;</span> <span class="token comment">// expected to be &#39;c&#39;</span>
<span class="token keyword">type</span> <span class="token class-name">tail2</span> <span class="token operator">=</span> Last<span class="token operator">&lt;</span>arr2<span class="token operator">&gt;</span> <span class="token comment">// expected to be 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// way1：索引思想</span>
<span class="token keyword">type</span> <span class="token class-name">Last<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token comment">// way2: 后占位思想</span>
<span class="token keyword">type</span> <span class="token class-name">Last<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>[any, ...T]</code>：表示我们构建了一个新数组，并添加了一个新元素到第一个位置，然后把原数组T中的元素依次扩展到新数组中，可以用以下伪代码表示：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 原数组</span>
<span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token comment">// 新数组</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token comment">// 结果: 3</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="chainable-可串联构造器" tabindex="-1"><a class="header-anchor" href="#chainable-可串联构造器"><span>Chainable(可串联构造器)</span></a></h2><blockquote><p><code>Chainable&lt;T&gt;</code> 用来让一个对象可以进行链式调用</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">const</span> config<span class="token operator">:</span> Chainable<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>

<span class="token keyword">const</span> res <span class="token operator">=</span> config
  <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;TypeScript&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Chainable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token generic-function"><span class="token function">options</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span><span class="token operator">:</span> Chainable<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>k <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>{[k in K]: V}</code>：每次调用options时，把key/value构造成一个对象，例如：<code>{ foo: 123 }</code>。</li><li><code>T &amp; {[k in K]: V}</code>：此处使用到 <code>&amp;</code> 关键词，用来合并 <code>T</code> 和 <code>{[k in K]: V}</code> 两个对象中的所有<code>key</code>。</li><li><code>Chainable&lt;&gt;</code>：递归调用 <code>Chainable</code> ，赋予新对象以链式调用的能力。</li></ul><h2 id="pop" tabindex="-1"><a class="header-anchor" href="#pop"><span>Pop</span></a></h2><blockquote><p><code>Pop&lt;T&gt;</code> 接收一个数组 <code>T</code> 并返回删除最后一个元素的新数组。</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">arr1</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">type</span> <span class="token class-name">arr2</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

<span class="token keyword">type</span> <span class="token class-name">re1</span> <span class="token operator">=</span> Pop<span class="token operator">&lt;</span>arr1<span class="token operator">&gt;</span> <span class="token comment">// expected to be []</span>
<span class="token keyword">type</span> <span class="token class-name">re2</span> <span class="token operator">=</span> Pop<span class="token operator">&lt;</span>arr2<span class="token operator">&gt;</span> <span class="token comment">// expected to be [3, 2]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Pop<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">L</span> <span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="lookup-查找" tabindex="-1"><a class="header-anchor" href="#lookup-查找"><span>LookUp(查找)</span></a></h2><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;cat&#39;</span>
  color<span class="token operator">:</span> <span class="token string">&#39;black&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;orange&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;gray&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;dog&#39;</span>
  color<span class="token operator">:</span> <span class="token string">&#39;white&#39;</span>
  name<span class="token operator">:</span> <span class="token string">&#39;wang&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 结果：Dog</span>
<span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> LookUp<span class="token operator">&lt;</span>Cat <span class="token operator">|</span> Dog<span class="token punctuation">,</span> <span class="token string">&#39;dog&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">LookUp<span class="token operator">&lt;</span>
  <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span>
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>U extends { type: string; }</code>：限制U的类型必须是具有属性为type的对象</li></ul><h2 id="promiseall返回类型" tabindex="-1"><a class="header-anchor" href="#promiseall返回类型"><span>PromiseAll返回类型</span></a></h2><blockquote><p><code>PromiseAll</code>是用来取Promise.all()函数所有返回的类型</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 结果：Promise&lt;[number, number, number]&gt;</span>
<span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> <span class="token function">PromiseAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现： 与之前的例子不同，PromiseAll我们声明的是一个function而不是type。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">PromiseAllType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>git
<span class="token punctuation">}</span><span class="token operator">&gt;</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">PromiseAll</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>values<span class="token operator">:</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> PromiseAllType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li>因为<code>Promise.all()</code>函数接受的是一个数组，因此泛型<code>T</code>限制为一个<code>any[]</code>类型的数组。</li><li><code>PromiseAllType</code>的实现思路有点像之前的<code>PromiseType</code>，只不过这里多了一层<code>Promise</code>的包裹，因为<code>Promise.all()</code>的返回类型也是一个<code>Promise</code>。</li></ul><h2 id="trim、trimleft以及trimright" tabindex="-1"><a class="header-anchor" href="#trim、trimleft以及trimright"><span>Trim、TrimLeft以及TrimRight</span></a></h2><blockquote><p><code>Trim、TrimLeft以及TrimRight</code>都是用来去除空格的。</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> t1 <span class="token operator">=</span> TrimLeft<span class="token operator">&lt;</span><span class="token string">&#39; str&#39;</span><span class="token operator">&gt;</span>  <span class="token comment">// &#39;str&#39;</span>
<span class="token keyword">const</span> t2 <span class="token operator">=</span> Trim<span class="token operator">&lt;</span><span class="token string">&#39; str &#39;</span><span class="token operator">&gt;</span>     <span class="token comment">// &#39;str&#39;</span>
<span class="token keyword">const</span> t3 <span class="token operator">=</span> TrimRight<span class="token operator">&lt;</span><span class="token string">&#39;str &#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;str&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Space</span> <span class="token operator">=</span> <span class="token string">&#39; &#39;</span> <span class="token operator">|</span> <span class="token string">&#39;\\n&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;\\t&#39;</span>
<span class="token keyword">type</span> <span class="token class-name">TrimLeft<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Space<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> TrimLeft<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">S</span>
<span class="token keyword">type</span> <span class="token class-name">Trim<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Space<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Space<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token operator">?</span> Trim<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">S</span>
<span class="token keyword">type</span> <span class="token class-name">TrimRight<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Space<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> TrimRight<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">S</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>TrimLeft</code> 和 <code>TrimRight</code> 的实现思路是相同的，区别在于空白符的占位出现在左侧还是右侧。</li><li><code>Trim</code> 的实现就是把 <code>TrimLeft</code> 和 <code>TrimRight</code> 所做的事情结合起来。</li></ul><h2 id="uncapatilize-首字母小写" tabindex="-1"><a class="header-anchor" href="#uncapatilize-首字母小写"><span>Uncapatilize(首字母小写)</span></a></h2><blockquote><p><code>Uncapatilize&lt;T&gt;</code>是用来将一个字符串的首字母变成小写的。</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">t2</span> <span class="token operator">=</span> Uncapatilize<span class="token operator">&lt;</span><span class="token string">&#39;Christine&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;christine&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Uncapatilize<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> firstLetter<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Lowercase<span class="token operator">&lt;</span>firstLetter<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token constant">S</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>Uncapatilize&lt;firstLetter&gt;</code>: 我们只需要首字母用firstLetter占位，用工具函数 <code>Uncapatilize</code> 将首字母变成小写。</li></ul><h2 id="replace" tabindex="-1"><a class="header-anchor" href="#replace"><span>Replace</span></a></h2><blockquote><p><code>Replace&lt;T&gt;</code> 是用来将字符串中第一次出现的某段内容，使用指定的字符串进行替换。</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// &#39;IamPicker&#39;</span>
<span class="token keyword">type</span> <span class="token class-name">t</span> <span class="token operator">=</span> Replace<span class="token operator">&lt;</span><span class="token string">&#39;IamChristine&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Christine&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Picker&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Replace<span class="token operator">&lt;</span>
  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  from <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  to <span class="token keyword">extends</span> <span class="token builtin">string</span>
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">from</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
      <span class="token operator">?</span> from <span class="token keyword">extends</span> <span class="token string">&#39;&#39;</span>
        <span class="token operator">?</span> <span class="token constant">S</span>
        <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>to<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
      <span class="token operator">:</span> <span class="token constant">S</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>\${infer L}\${from}\${infer R}</code>: <code>infer L</code> 是 <code>Iam</code> 的占位，<code>form</code>是<code>Christine</code>，<code>infer R</code>是 <code>空字符串</code> 的占位。</li></ul><h2 id="replaceall" tabindex="-1"><a class="header-anchor" href="#replaceall"><span>ReplaceAll</span></a></h2><blockquote><p><code>ReplaceAll&lt;T&gt;</code> 是用来将字符串中出现的某段内容，使用指定的字符串进行全局替换。</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// &#39;IamPicker，IamPickeryeah&#39;</span>
<span class="token keyword">type</span> <span class="token class-name">t</span> <span class="token operator">=</span> Replace<span class="token operator">&lt;</span><span class="token string">&#39;IamChristine，IamChristineyeah&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Christine&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Picker&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ReplaceAll<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> from <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> to <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">from</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> 
  <span class="token operator">?</span> from <span class="token keyword">extends</span> <span class="token string">&#39;&#39;</span> 
    <span class="token operator">?</span> <span class="token constant">T</span>
    <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ReplaceAll<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> to<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>to<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ReplaceAll<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> from <span class="token punctuation">,</span>to<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token operator">:</span> <span class="token constant">T</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="appendargument-函数追加形参" tabindex="-1"><a class="header-anchor" href="#appendargument-函数追加形参"><span>AppendArgument（函数追加形参）</span></a></h2><blockquote><p><code>AppendArgument&lt;Fn, A&gt;</code>对于给定的函数类型 Fn，以及一个任意类型 A，返回一个新的函数 G。G 拥有 Fn 的所有参数并在末尾追加类型为 A 的参数。</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

<span class="token comment">// (args_0: number, args_1: string, args_2: boolean) =&gt; number</span>
<span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> AppendArgument<span class="token operator">&lt;</span>Fn<span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">AppendArgument<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> Params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> Res <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>Params<span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Res <span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="permutation" tabindex="-1"><a class="header-anchor" href="#permutation"><span>Permutation</span></a></h2><blockquote><p><code>Permutation&lt;T&gt;</code></p></blockquote><h2 id="lengthofstring" tabindex="-1"><a class="header-anchor" href="#lengthofstring"><span>LengthOfString</span></a></h2><blockquote><p><code>LengthOfString&lt;T extends string, U extends string[] = []&gt;</code>用来计算一个字符串的长度。</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> LengthOfString<span class="token operator">&lt;</span><span class="token string">&#39;Hello&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">LengthOfString<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> firstLetter<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token operator">?</span> LengthOfString<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">,</span> firstLetter<span class="token punctuation">]</span><span class="token operator">&gt;</span>
  <span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li>我们通过一个泛型的辅助数组来帮计算字符串的长度，在第一次符合条件时，将其第一个字符添加到数组中，在后续的递归过程中，如果不符合条件，直接返回T[&#39;length&#39;]，这个过程可以用如下代码表示：</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;!-- 第一次递归 --&gt;
T: &#39;Hello&#39; firstLetter: &#39;H&#39; R: &#39;ello&#39; U: [&#39;H&#39;]
&lt;!-- 第二次递归 --&gt;
T: &#39;ello&#39;  firstLetter: &#39;e&#39; R: &#39;llo&#39;  U: [&#39;H&#39;, &#39;e&#39;]
&lt;!-- 第三次递归 --&gt;
T: &#39;llo&#39;   firstLetter: &#39;l&#39; R: &#39;lo&#39;   U: [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;]
&lt;!-- 第四次递归 --&gt;
T: &#39;lo&#39;    firstLetter: &#39;l&#39; R: &#39;o&#39;    U: [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;]
&lt;!-- 第五次递归 --&gt;
T: &#39;o&#39;     firstLetter: &#39;o&#39; R: &#39;&#39;     U: [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;， &#39;l&#39;, &#39;o&#39;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 <code>T</code> 为空时，infer 占位需要内容，<code>firstLetter</code> 和 <code>R</code> 需要有一个有内容，此时 T extends <code>\${infer firstLetter}\${infer R}</code>为false，所以会执行U[&#39;length&#39;]</p><h2 id="flatten-数组降维" tabindex="-1"><a class="header-anchor" href="#flatten-数组降维"><span>Flatten(数组降维)</span></a></h2><blockquote><p><code>Flatten&lt;T&gt;</code> 将多维数组变为一维数组。</p></blockquote><p>用法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// [1, 2, 3, 4, 5]</span>
<span class="token keyword">type</span> <span class="token class-name">flatten</span> <span class="token operator">=</span> Flatten<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Flatten<span class="token operator">&lt;</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span>
      <span class="token operator">?</span> <span class="token constant">L</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>Flatten<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">...</span>Flatten<span class="token operator">&lt;</span>Rest<span class="token operator">&gt;</span><span class="token punctuation">]</span>
        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span>Flatten<span class="token operator">&lt;</span>Rest<span class="token operator">&gt;</span><span class="token punctuation">]</span>
      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,185),o=[p];function l(c,i){return n(),a("div",null,o)}const k=s(e,[["render",l],["__file","challenge.html.vue"]]),u=JSON.parse('{"path":"/typescript/challenge.html","title":"自定义工具类型","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"First","slug":"first","link":"#first","children":[]},{"level":2,"title":"Mutable","slug":"mutable","link":"#mutable","children":[]},{"level":2,"title":"Length","slug":"length","link":"#length","children":[]},{"level":2,"title":"If","slug":"if","link":"#if","children":[]},{"level":2,"title":"Concat","slug":"concat","link":"#concat","children":[]},{"level":2,"title":"Includes","slug":"includes","link":"#includes","children":[]},{"level":2,"title":"Push","slug":"push","link":"#push","children":[]},{"level":2,"title":"Unshift","slug":"unshift","link":"#unshift","children":[]},{"level":2,"title":"PromiseType","slug":"promisetype","link":"#promisetype","children":[]},{"level":2,"title":"按需Readonly","slug":"按需readonly","link":"#按需readonly","children":[]},{"level":2,"title":"DeepReadonly","slug":"deepreadonly","link":"#deepreadonly","children":[]},{"level":2,"title":"TupleToUnion","slug":"tupletounion","link":"#tupletounion","children":[]},{"level":2,"title":"Last","slug":"last","link":"#last","children":[]},{"level":2,"title":"Chainable(可串联构造器)","slug":"chainable-可串联构造器","link":"#chainable-可串联构造器","children":[]},{"level":2,"title":"Pop","slug":"pop","link":"#pop","children":[]},{"level":2,"title":"LookUp(查找)","slug":"lookup-查找","link":"#lookup-查找","children":[]},{"level":2,"title":"PromiseAll返回类型","slug":"promiseall返回类型","link":"#promiseall返回类型","children":[]},{"level":2,"title":"Trim、TrimLeft以及TrimRight","slug":"trim、trimleft以及trimright","link":"#trim、trimleft以及trimright","children":[]},{"level":2,"title":"Uncapatilize(首字母小写)","slug":"uncapatilize-首字母小写","link":"#uncapatilize-首字母小写","children":[]},{"level":2,"title":"Replace","slug":"replace","link":"#replace","children":[]},{"level":2,"title":"ReplaceAll","slug":"replaceall","link":"#replaceall","children":[]},{"level":2,"title":"AppendArgument（函数追加形参）","slug":"appendargument-函数追加形参","link":"#appendargument-函数追加形参","children":[]},{"level":2,"title":"Permutation","slug":"permutation","link":"#permutation","children":[]},{"level":2,"title":"LengthOfString","slug":"lengthofstring","link":"#lengthofstring","children":[]},{"level":2,"title":"Flatten(数组降维)","slug":"flatten-数组降维","link":"#flatten-数组降维","children":[]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"typescript/challenge.md"}');export{k as comp,u as data};
